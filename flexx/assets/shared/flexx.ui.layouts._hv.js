/* ======================== flexx.ui.layouts._hv ========================*/

/* Autogenerated code from Flexx. Code Subject to the BSD-2-clause license. */



flexx.define("flexx.ui.layouts._hv", ["pscript-std.js", "flexx.ui.layouts._layout", "flexx.event.js", "flexx.app._component2"], function (_py, flexx$ui$layouts$_layout, event, flexx$app$_component2) {

"use strict";

var _pyfunc_abs = _py._pyfunc_abs, _pyfunc_float = _py._pyfunc_float, _pyfunc_format = _py._pyfunc_format, _pyfunc_op_add = _py._pyfunc_op_add, _pyfunc_op_contains = _py._pyfunc_op_contains, _pyfunc_op_equals = _py._pyfunc_op_equals, _pyfunc_op_error = _py._pyfunc_op_error, _pyfunc_op_instantiate = _py._pyfunc_op_instantiate, _pyfunc_op_mult = _py._pyfunc_op_mult, _pyfunc_op_parse_kwargs = _py._pyfunc_op_parse_kwargs, _pyfunc_range = _py._pyfunc_range, _pyfunc_reversed = _py._pyfunc_reversed, _pyfunc_sum = _py._pyfunc_sum, _pyfunc_truthy = _py._pyfunc_truthy;

var _pymeth_append = _py._pymeth_append, _pymeth_copy = _py._pymeth_copy, _pymeth_format = _py._pymeth_format, _pymeth_get = _py._pymeth_get, _pymeth_lower = _py._pymeth_lower, _pymeth_pop = _py._pymeth_pop, _pymeth_remove = _py._pymeth_remove, _pymeth_repeat = _py._pymeth_repeat, _pymeth_replace = _py._pymeth_replace;

var app$LocalProperty = flexx$app$_component2.LocalProperty;

var OrientationProp = event.OrientationProp;

var Property = event.Property;

var Layout = flexx$ui$layouts$_layout.Layout;





var OrientationProp;
OrientationProp = function () {
    _pyfunc_op_instantiate(this, arguments);
}
OrientationProp.prototype = Object.create(Property.prototype);
OrientationProp.prototype._base_class = Property.prototype;
OrientationProp.prototype.__name__ = "OrientationProp";

OrientationProp.prototype._default = "h";
OrientationProp.prototype._validate = function (v, name, data) {
    var err_2;
    if ((Object.prototype.toString.call(v).slice(8,-1).toLowerCase() === 'string')) {
        v = _pymeth_replace.call(_pymeth_lower.call(v), "-", "");
    }
    v = _pymeth_get.call(({horizontal: "h", 0: "h", lefttoright: "h", vertical: "v", 1: "v", toptobottom: "v", righttoleft: "hr", bottomtotop: "vr"}), v, v);
    if ((!_pyfunc_op_contains(v, ["h", "v", "hr", "vr"]))) {
        throw _pyfunc_op_error('ValueError', _pymeth_format.call("{}.orientation got unknown value {!r}", this.id, v));
    }
    return v;
};



var HVLayout = function () {
    _pyfunc_op_instantiate(this, arguments);
}
HVLayout.prototype = Object.create(Layout.prototype);
HVLayout.prototype._base_class = Layout.prototype;
HVLayout.prototype.__name__ = "HVLayout";
var $HVLayout = HVLayout.prototype;

$HVLayout._DEFAULT_ORIENTATION = "h"
$HVLayout._DEFAULT_MODE = "box"
$HVLayout._mode_value = "box";
$HVLayout._orientation_value = "h";
$HVLayout._spacing_value = 4;
$HVLayout._padding_value = 1;
$HVLayout._splitter_positions_value = null;
$HVLayout.__attributes__ = ["id", "root", "session", "uid"]
$HVLayout.__properties__ = ["_size_limits", "capture_mouse", "children", "container", "css_class", "flex", "icon", "maxsize", "minsize", "minsize_from_children", "mode", "orientation", "padding", "parent", "size", "spacing", "splitter_positions", "tabindex", "title"]
$HVLayout.__actions__ = ["_rerender", "_set_size_limits", "apply_style", "check_real_size", "set_capture_mouse", "set_container", "set_css_class", "set_flex", "set_from_flex_values", "set_icon", "set_maxsize", "set_minsize", "set_minsize_from_children", "set_mode", "set_orientation", "set_padding", "set_parent", "set_spacing", "set_splitter_positions", "set_tabindex", "set_title"]
$HVLayout.__emitters__ = ["key_down", "key_press", "key_up", "pointer_cancel", "pointer_click", "pointer_double_click", "pointer_down", "pointer_move", "pointer_up", "pointer_wheel", "user_splitter_positions"]
$HVLayout.__reactions__ = ["_HVLayout__let_children_check_size", "_HVLayout__render_positions", "_HVLayout__set_mode", "_HVLayout__set_orientation", "_HVLayout__set_padding", "_HVLayout__size_changed", "_HVLayout__spacing_changed", "_HVLayout__watch_splitter_positions", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__render", "_Widget__size_may_have_changed", "_Widget__title_changed", "_Widget__update_tabindex", "_set_box_child_flexes", "_set_box_spacing", "_set_split_from_flexes", "_update_minmaxsize"]
$HVLayout.__jsmodule__ = "flexx.ui.layouts._hv"
$HVLayout.__proxy_properties__ = ["_size_limits", "capture_mouse", "container", "css_class", "flex", "maxsize", "minsize", "minsize_from_children", "mode", "orientation", "padding", "parent", "size", "spacing", "tabindex", "title"]

$HVLayout.__init__ = function () {
    var args, kwargs;
    kwargs = {};
    if (arguments.length == 1 && typeof arguments[0] == 'object' && Object.keys(arguments[0]).toString() == 'flx_args,flx_kwargs') {
        kwargs = _pyfunc_op_parse_kwargs([], [], arguments[0].flx_kwargs);
        args = arguments[0].flx_args;
    } else {args = Array.prototype.slice.call(arguments);}
    kwargs["mode"] = _pymeth_get.call(kwargs, "mode", this._DEFAULT_MODE);
    kwargs["orientation"] = _pymeth_get.call(kwargs, "orientation", this._DEFAULT_ORIENTATION);
    this._seps = [];
    this._dragging = null;
    (Layout.prototype.__init__).call(this, {flx_args: args, flx_kwargs: kwargs});
    if ((_pyfunc_op_contains("Split", this._id) && ((!_pyfunc_op_contains("spacing", kwargs))))) {
        this.set_spacing(8);
    }
    return null;
};

$HVLayout.set_from_flex_values = function set_from_flex_values () {
    var dim, i, pos, positions, size_sum, sizes, stub1_seq, stub2_itr, stub3_, stub3_i, stub3_i0, stub3_iter0, stub4_, stub4_i, stub4_i0, stub4_iter0, widget;
    sizes = [];
    dim = (_pyfunc_op_contains("h", this.orientation))? (0) : (1);
    stub1_seq = this.children;
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) { stub1_seq = Object.keys(stub1_seq);}
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        widget = stub1_seq[stub2_itr];
        _pymeth_append.call(sizes, widget.flex[dim]);
    }
    size_sum = ((sizes.length == 0))? (0) : (_pyfunc_sum(sizes));
    if (_pyfunc_op_equals(size_sum, 0)) {
        stub3_ = [];stub3_iter0 = sizes;if ((typeof stub3_iter0 === "object") && (!Array.isArray(stub3_iter0))) {stub3_iter0 = Object.keys(stub3_iter0);}for (stub3_i0=0; stub3_i0<stub3_iter0.length; stub3_i0++) {stub3_i = stub3_iter0[stub3_i0];{stub3_.push(1 / sizes.length);}}
        sizes = stub3_;
    } else {
        stub4_ = [];stub4_iter0 = sizes;if ((typeof stub4_iter0 === "object") && (!Array.isArray(stub4_iter0))) {stub4_iter0 = Object.keys(stub4_iter0);}for (stub4_i0=0; stub4_i0<stub4_iter0.length; stub4_i0++) {stub4_i = stub4_iter0[stub4_i0];{stub4_.push(stub4_i / size_sum);}}
        sizes = stub4_;
    }
    positions = [];
    pos = 0;
    for (i = 0; i < sizes.length - 1; i += 1) {
        pos = _pyfunc_op_add(pos, sizes[i]);
        _pymeth_append.call(positions, pos);
    }
    this._mutate_splitter_positions(positions);
    return null;
};
$HVLayout.set_from_flex_values.nobind = true;

$HVLayout.set_splitter_positions = function set_splitter_positions () {
    var i, pos, positions, positions2;
    positions = Array.prototype.slice.call(arguments);
    if ((!_pyfunc_op_equals(this.mode, "SPLIT"))) {
        return null;
    }
    positions2 = [];
    for (i = 0; i < positions.length; i += 1) {
        pos = positions[i];
        if ((pos !== null)) {
            pos = Math.max(0.0, (Math.min(1.0, _pyfunc_float(pos))));
        }
        _pymeth_append.call(positions2, pos);
    }
    this._mutate_splitter_positions(positions2);
    return null;
};
$HVLayout.set_splitter_positions.nobind = true;

$HVLayout.user_splitter_positions = function () {
    var i, pos, positions, positions2;
    positions = Array.prototype.slice.call(arguments);
    if ((!_pyfunc_op_equals(this.mode, "SPLIT"))) {
        return null;
    }
    positions2 = [];
    for (i = 0; i < positions.length; i += 1) {
        pos = positions[i];
        if ((pos !== null)) {
            pos = Math.max(0.0, (Math.min(1.0, _pyfunc_float(pos))));
        }
        _pymeth_append.call(positions2, pos);
    }
    this.set_splitter_positions.apply(this, positions);
    return ({positions: positions});
};
$HVLayout.user_splitter_positions.nobind = true;

$HVLayout._query_min_max_size = function () {
    var child, extra_padding, extra_spacing, hori, i, mima0, mima1, mima2, stub1_seq, stub2_itr;
    hori = _pyfunc_op_contains("h", this.orientation);
    mima0 = (Layout.prototype._query_min_max_size).call(this);
    if ((hori === true)) {
        mima1 = [0, 0, 0, 1000000000.0];
    } else {
        mima1 = [0, 1000000000.0, 0, 0];
    }
    if (_pyfunc_truthy(this.minsize_from_children)) {
        stub1_seq = this.children;
        if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) { stub1_seq = Object.keys(stub1_seq);}
        for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
            child = stub1_seq[stub2_itr];
            mima2 = child._size_limits;
            if ((hori === true)) {
                mima1[0] = _pyfunc_op_add(mima1[0], mima2[0]);
                mima1[1] = _pyfunc_op_add(mima1[1], mima2[1]);
                mima1[2] = Math.max(mima1[2], mima2[2]);
                mima1[3] = Math.min(mima1[3], mima2[3]);
            } else {
                mima1[0] = Math.max(mima1[0], mima2[0]);
                mima1[1] = Math.min(mima1[1], mima2[1]);
                mima1[2] = _pyfunc_op_add(mima1[2], mima2[2]);
                mima1[3] = _pyfunc_op_add(mima1[3], mima2[3]);
            }
        }
    }
    if (_pyfunc_op_equals(mima1[1], 0)) {
        mima1[1] = 1000000000.0;
    }
    if (_pyfunc_op_equals(mima1[3], 0)) {
        mima1[3] = 1000000000.0;
    }
    if (_pyfunc_truthy(this.minsize_from_children)) {
        extra_padding = _pyfunc_op_mult(this.padding, 2);
        extra_spacing = _pyfunc_op_mult(this.spacing, (this.children.length - 1));
        for (i = 0; i < 4; i += 1) {
            mima1[i] = _pyfunc_op_add(mima1[i], extra_padding);
        }
        if ((hori === true)) {
            mima1[0] = _pyfunc_op_add(mima1[0], extra_spacing);
            mima1[1] = _pyfunc_op_add(mima1[1], extra_spacing);
        } else {
            mima1[2] = _pyfunc_op_add(mima1[2], extra_spacing);
            mima1[3] = _pyfunc_op_add(mima1[3], extra_spacing);
        }
    }
    return [Math.max(mima1[0], mima0[0]), Math.min(mima1[1], mima0[1]), Math.max(mima1[2], mima0[2]), Math.min(mima1[3], mima0[3])];
};

$HVLayout._HVLayout__size_changed = function () {
    var events;
    events = Array.prototype.slice.call(arguments);
    this._rerender();
    return null;
};
$HVLayout._HVLayout__size_changed.nobind = true;
$HVLayout._HVLayout__size_changed._mode = "greedy"
$HVLayout._HVLayout__size_changed._connection_strings = ["size", "_size_limits"]

$HVLayout._HVLayout__let_children_check_size = function () {
    var child, events, stub1_seq, stub2_itr;
    events = Array.prototype.slice.call(arguments);
    stub1_seq = this.children;
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) { stub1_seq = Object.keys(stub1_seq);}
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        child = stub1_seq[stub2_itr];
        child.check_real_size();
    }
    return null;
};
$HVLayout._HVLayout__let_children_check_size.nobind = true;
$HVLayout._HVLayout__let_children_check_size._mode = "greedy"
$HVLayout._HVLayout__let_children_check_size._connection_strings = ["children*.size"]

$HVLayout._HVLayout__set_mode = function () {
    var child, events, stub1_seq, stub2_itr;
    events = Array.prototype.slice.call(arguments);
    stub1_seq = this.children;
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) { stub1_seq = Object.keys(stub1_seq);}
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        child = stub1_seq[stub2_itr];
        this._release_child(child);
    }
    if (_pyfunc_op_equals(this.mode, "BOX")) {
        _pymeth_remove.call(this.outernode.classList, "flx-split");
        this.outernode.classList.add("flx-box");
        this._set_box_child_flexes();
        this._set_box_spacing();
    } else {
        _pymeth_remove.call(this.outernode.classList, "flx-box");
        this.outernode.classList.add("flx-split");
        this._rerender();
    }
    return null;
};
$HVLayout._HVLayout__set_mode.nobind = true;
$HVLayout._HVLayout__set_mode._mode = "normal"
$HVLayout._HVLayout__set_mode._connection_strings = ["mode"]

$HVLayout._HVLayout__set_orientation = function () {
    var events, ori, stub1_seq, stub2_itr, widget;
    events = Array.prototype.slice.call(arguments);
    ori = this.orientation;
    if (_pyfunc_op_contains("h", ori)) {
        this.outernode.classList.add("flx-horizontal");
        _pymeth_remove.call(this.outernode.classList, "flx-vertical");
    } else {
        _pymeth_remove.call(this.outernode.classList, "flx-horizontal");
        this.outernode.classList.add("flx-vertical");
    }
    if (_pyfunc_op_contains("r", ori)) {
        this.outernode.classList.add("flx-reversed");
    } else {
        _pymeth_remove.call(this.outernode.classList, "flx-reversed");
    }
    stub1_seq = this.children;
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) { stub1_seq = Object.keys(stub1_seq);}
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        widget = stub1_seq[stub2_itr];
        widget.check_real_size();
    }
    this._rerender();
    return null;
};
$HVLayout._HVLayout__set_orientation.nobind = true;
$HVLayout._HVLayout__set_orientation._mode = "normal"
$HVLayout._HVLayout__set_orientation._connection_strings = ["orientation"]

$HVLayout._HVLayout__set_padding = function () {
    var events, stub1_seq, stub2_itr, widget;
    events = Array.prototype.slice.call(arguments);
    this.outernode.style["padding"] = this.padding + "px";
    stub1_seq = this.children;
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) { stub1_seq = Object.keys(stub1_seq);}
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        widget = stub1_seq[stub2_itr];
        widget.check_real_size();
    }
    this._rerender();
    return null;
};
$HVLayout._HVLayout__set_padding.nobind = true;
$HVLayout._HVLayout__set_padding._mode = "normal"
$HVLayout._HVLayout__set_padding._connection_strings = ["padding"]

$HVLayout._release_child = function (widget) {
    var n, stub1_seq, stub2_itr;
    stub1_seq = ["margin", "left", "width", "top", "height"];
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) { stub1_seq = Object.keys(stub1_seq);}
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        n = stub1_seq[stub2_itr];
        widget.outernode.style[n] = "";
    }
    return null;
};

$HVLayout._render_dom = function () {
    var children, i, mode, nodes, use_seps;
    children = this.children;
    mode = this.mode;
    use_seps = _pyfunc_op_equals(mode, "SPLIT");
    if (_pyfunc_op_equals(mode, "BOX")) {
        this._ensure_seps(0);
    } else {
        this._ensure_seps(children.length - 1);
    }
    nodes = [];
    for (i = 0; i < children.length; i += 1) {
        _pymeth_append.call(nodes, (children[i].outernode));
        if ((_pyfunc_truthy(use_seps) && (i < this._seps.length))) {
            _pymeth_append.call(nodes, this._seps[i]);
        }
    }
    return nodes;
};

$HVLayout._ensure_seps = function (n) {
    var sep, to_remove;
    n = Math.max(0, n);
    to_remove = this._seps.slice(n);
    this._seps = this._seps.slice(0,n);
    while (this._seps.length < n) {
        sep = window.document.createElement("div");
        _pymeth_append.call(this._seps, sep);
        sep.i = this._seps.length - 1;
        sep.classList.add("flx-split-sep");
        sep.rel_pos = 0;
        sep.abs_pos = 0;
    }
    return null;
};

$HVLayout._rerender = function _rerender () {
    var child, sp1, sp2, stub1_seq, stub2_itr;
    if (_pyfunc_op_equals(this.mode, "BOX")) {
        stub1_seq = this.children;
        if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) { stub1_seq = Object.keys(stub1_seq);}
        for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
            child = stub1_seq[stub2_itr];
            child.check_real_size();
        }
    } else {
        sp1 = [];
        sp2 = this.splitter_positions;
        sp2 = ((sp2 === null))? ([]) : (sp2);
        if ((sp2.length == 0)) {
            sp1 = [1];
        }
        this._mutate_splitter_positions(sp1);
        this._mutate_splitter_positions(sp2);
    }
    return null;
};
$HVLayout._rerender.nobind = true;

$HVLayout._set_box_child_flexes = function () {
    var events, i, ori, stub1_seq, stub2_itr, stub3_seq, stub4_itr, widget;
    events = Array.prototype.slice.call(arguments);
    if ((!_pyfunc_op_equals(this.mode, "BOX"))) {
        return null;
    }
    ori = this.orientation;
    i = (_pyfunc_op_contains(ori, [0, "h", "hr"]))? (0) : (1);
    stub1_seq = this.children;
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) { stub1_seq = Object.keys(stub1_seq);}
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        widget = stub1_seq[stub2_itr];
        _applyBoxStyle(widget.outernode, "flex-grow", widget.flex[i]);
        _applyBoxStyle(widget.outernode, "flex-shrink", _pyfunc_truthy(widget.flex[i]) || 1);
    }
    stub3_seq = this.children;
    if ((typeof stub3_seq === "object") && (!Array.isArray(stub3_seq))) { stub3_seq = Object.keys(stub3_seq);}
    for (stub4_itr = 0; stub4_itr < stub3_seq.length; stub4_itr += 1) {
        widget = stub3_seq[stub4_itr];
        widget.check_real_size();
    }
    return null;
};
$HVLayout._set_box_child_flexes.nobind = true;
$HVLayout._set_box_child_flexes._mode = "greedy"
$HVLayout._set_box_child_flexes._connection_strings = ["orientation", "children", "children*.flex"]

$HVLayout._set_box_spacing = function () {
    var child, children, children_events, events, margin, old_children, ori, stub10_seq, stub11_itr, stub1_, stub1_ev, stub1_i0, stub1_iter0, stub2_seq, stub3_itr, stub4_seq, stub5_itr, stub6_seq, stub7_itr, stub8_seq, stub9_itr, widget;
    events = Array.prototype.slice.call(arguments);
    if ((!_pyfunc_op_equals(this.mode, "BOX"))) {
        return null;
    }
    ori = this.orientation;
    stub1_ = [];stub1_iter0 = events;if ((typeof stub1_iter0 === "object") && (!Array.isArray(stub1_iter0))) {stub1_iter0 = Object.keys(stub1_iter0);}for (stub1_i0=0; stub1_i0<stub1_iter0.length; stub1_i0++) {stub1_ev = stub1_iter0[stub1_i0];if (!(_pyfunc_op_equals(stub1_ev.type, "children"))) {continue;}{stub1_.push(stub1_ev);}}
    children_events = stub1_;
    old_children = (_pyfunc_truthy(children_events))? (children_events[0].old_value) : ([]);
    children = this.children;
    stub2_seq = children;
    if ((typeof stub2_seq === "object") && (!Array.isArray(stub2_seq))) { stub2_seq = Object.keys(stub2_seq);}
    for (stub3_itr = 0; stub3_itr < stub2_seq.length; stub3_itr += 1) {
        child = stub2_seq[stub3_itr];
        child.outernode.style["margin-top"] = "";
        child.outernode.style["margin-left"] = "";
    }
    stub4_seq = old_children;
    if ((typeof stub4_seq === "object") && (!Array.isArray(stub4_seq))) { stub4_seq = Object.keys(stub4_seq);}
    for (stub5_itr = 0; stub5_itr < stub4_seq.length; stub5_itr += 1) {
        child = stub4_seq[stub5_itr];
        child.outernode.style["margin-top"] = "";
        child.outernode.style["margin-left"] = "";
    }
    margin = (_pyfunc_op_contains(ori, [1, "v", "vr"]))? ("margin-top") : ("margin-left");
    if (children.length) {
        if (_pyfunc_op_contains(ori, ["vr", "hr"])) {
            children[children.length -1].outernode.style[margin] = "0px";
            stub6_seq = children.slice(0,-1);
            if ((typeof stub6_seq === "object") && (!Array.isArray(stub6_seq))) { stub6_seq = Object.keys(stub6_seq);}
            for (stub7_itr = 0; stub7_itr < stub6_seq.length; stub7_itr += 1) {
                child = stub6_seq[stub7_itr];
                child.outernode.style[margin] = this.spacing + "px";
            }
        } else {
            children[0].outernode.style[margin] = "0px";
            stub8_seq = children.slice(1);
            if ((typeof stub8_seq === "object") && (!Array.isArray(stub8_seq))) { stub8_seq = Object.keys(stub8_seq);}
            for (stub9_itr = 0; stub9_itr < stub8_seq.length; stub9_itr += 1) {
                child = stub8_seq[stub9_itr];
                child.outernode.style[margin] = this.spacing + "px";
            }
        }
    }
    stub10_seq = children;
    if ((typeof stub10_seq === "object") && (!Array.isArray(stub10_seq))) { stub10_seq = Object.keys(stub10_seq);}
    for (stub11_itr = 0; stub11_itr < stub10_seq.length; stub11_itr += 1) {
        widget = stub10_seq[stub11_itr];
        widget.check_real_size();
    }
    return null;
};
$HVLayout._set_box_spacing.nobind = true;
$HVLayout._set_box_spacing._mode = "greedy"
$HVLayout._set_box_spacing._connection_strings = ["spacing", "orientation", "children"]

$HVLayout._get_available_size = function () {
    var bar_size, pad_size, total_size;
    bar_size = this.spacing;
    pad_size = this.padding;
    if (_pyfunc_op_contains("h", this.orientation)) {
        total_size = this.outernode.clientWidth;
    } else {
        total_size = this.outernode.clientHeight;
    }
    return [total_size, (total_size - _pyfunc_op_mult(bar_size, this._seps.length)) - _pyfunc_op_mult(2, pad_size)];
};

$HVLayout._HVLayout__spacing_changed = function () {
    var events;
    events = Array.prototype.slice.call(arguments);
    this._rerender();
    return null;
};
$HVLayout._HVLayout__spacing_changed.nobind = true;
$HVLayout._HVLayout__spacing_changed._mode = "normal"
$HVLayout._HVLayout__spacing_changed._connection_strings = ["spacing"]

$HVLayout._set_split_from_flexes = function () {
    var events;
    events = Array.prototype.slice.call(arguments);
    this.set_from_flex_values();
    return null;
};
$HVLayout._set_split_from_flexes.nobind = true;
$HVLayout._set_split_from_flexes._mode = "greedy"
$HVLayout._set_split_from_flexes._connection_strings = ["children", "children*.flex"]

$HVLayout._HVLayout__watch_splitter_positions = function () {
    if ((!_pyfunc_op_equals(this.mode, "BOX"))) {
        this.splitter_positions;
        this.emit("_render");
    }
    return null;
};
$HVLayout._HVLayout__watch_splitter_positions.nobind = true;
$HVLayout._HVLayout__watch_splitter_positions._mode = "auto"

$HVLayout._HVLayout__apply_one_splitter_pos = function (index, pos) {
    var abs_positions, available_size, children, cur, i, ma, mi, ori, ref_pos, stub10_, stub1_, stub2_, stub2_i0, stub2_iter0, stub2_sep, stub3_, stub4_seq, stub5_itr, stub6_, stub7_, stub8_seq, stub9_itr, total_size;
    children = this.children;
    stub1_ = this._get_available_size();
    total_size = stub1_[0];available_size = stub1_[1];
    ori = this.orientation;
    if ((index >= this._seps.length)) {
        return null;
    }
    if ((pos < 0)) {
        pos = available_size - pos;
    }
    pos = Math.max(0, Math.min(available_size, pos));
    stub2_ = [];stub2_iter0 = this._seps;if ((typeof stub2_iter0 === "object") && (!Array.isArray(stub2_iter0))) {stub2_iter0 = Object.keys(stub2_iter0);}for (stub2_i0=0; stub2_i0<stub2_iter0.length; stub2_i0++) {stub2_sep = stub2_iter0[stub2_i0];{stub2_.push(stub2_sep.abs_pos);}}
    abs_positions = stub2_;
    abs_positions[index] = pos;
    ref_pos = pos;
    stub4_seq = _pyfunc_reversed(_pyfunc_range(0, index, 1));
    if ((typeof stub4_seq === "object") && (!Array.isArray(stub4_seq))) { stub4_seq = Object.keys(stub4_seq);}
    for (stub5_itr = 0; stub5_itr < stub4_seq.length; stub5_itr += 1) {
        i = stub4_seq[stub5_itr];
        cur = abs_positions[i];
        stub3_ = _get_min_max(children[i + 1], ori);
        mi = stub3_[0];ma = stub3_[1];
        abs_positions[i] = ref_pos = Math.max((ref_pos - ma), (Math.min((ref_pos - mi), cur)));
    }
    ref_pos = pos;
    for (i = index + 1; i < abs_positions.length; i += 1) {
        cur = abs_positions[i];
        stub6_ = _get_min_max(children[i], ori);
        mi = stub6_[0];ma = stub6_[1];
        abs_positions[i] = ref_pos = Math.max(_pyfunc_op_add(ref_pos, mi), (Math.min(_pyfunc_op_add(ref_pos, ma), cur)));
    }
    ref_pos = available_size;
    stub8_seq = _pyfunc_reversed(_pyfunc_range(0, abs_positions.length, 1));
    if ((typeof stub8_seq === "object") && (!Array.isArray(stub8_seq))) { stub8_seq = Object.keys(stub8_seq);}
    for (stub9_itr = 0; stub9_itr < stub8_seq.length; stub9_itr += 1) {
        i = stub8_seq[stub9_itr];
        cur = abs_positions[i];
        stub7_ = _get_min_max(children[i + 1], ori);
        mi = stub7_[0];ma = stub7_[1];
        abs_positions[i] = ref_pos = Math.max((ref_pos - ma), (Math.min((ref_pos - mi), cur)));
    }
    ref_pos = 0;
    for (i = 0; i < abs_positions.length; i += 1) {
        cur = abs_positions[i];
        stub10_ = _get_min_max(children[i], ori);
        mi = stub10_[0];ma = stub10_[1];
        abs_positions[i] = ref_pos = Math.max(_pyfunc_op_add(ref_pos, mi), (Math.min(_pyfunc_op_add(ref_pos, ma), cur)));
    }
    this.user_splitter_positions.apply(this, (function list_comprehension (iter0) {var res = [];var pos, i0;if ((typeof iter0 === "object") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {pos = iter0[i0];{res.push(pos / available_size);}}return res;}).call(this, abs_positions));
    return null;
};

$HVLayout._HVLayout__apply_positions = function () {
    var available_size, children, gets, i, iter, net_size, ori, positions, ref_pos, size_for_each, stub1_, stub2_, stub3_seq, stub4_itr, stub5_seq, stub6_itr, take, total_size, w, ww, ww2;
    children = this.children;
    stub1_ = this._get_available_size();
    total_size = stub1_[0];available_size = stub1_[1];
    ori = this.orientation;
    positions = this.splitter_positions;
    if ((positions.length != this._seps.length)) {
        return null;
    }
    if (_pyfunc_truthy(children.length != (this._seps.length + 1))) {
        return null;
    }
    for (i = 0; i < positions.length; i += 1) {
        this._seps[i].abs_pos = _pyfunc_op_mult(positions[i], available_size);
    }
    ww = [];
    ref_pos = 0;
    for (i = 0; i < children.length; i += 1) {
        w = ({});
        _pymeth_append.call(ww, w);
        if ((i < this._seps.length)) {
            w.given = (this._seps[i].abs_pos) - ref_pos;
            ref_pos = this._seps[i].abs_pos;
        } else {
            w.given = available_size - ref_pos;
        }
        stub2_ = _get_min_max(children[i], ori);
        w.mi = stub2_[0];w.ma = stub2_[1];
        w.can_give = w.given - w.mi;
        w.can_receive = w.ma - w.given;
        w.has = w.given;
    }
    net_size = 0;
    stub3_seq = ww;
    if ((typeof stub3_seq === "object") && (!Array.isArray(stub3_seq))) { stub3_seq = Object.keys(stub3_seq);}
    for (stub4_itr = 0; stub4_itr < stub3_seq.length; stub4_itr += 1) {
        w = stub3_seq[stub4_itr];
        if ((w.can_give < 0)) {
            net_size = _pyfunc_op_add(net_size, w.can_give);
            w.has = w.mi;
            w.can_give = 0;
            w.can_receive = w.ma - w.has;
        } else if ((w.can_receive < 0)) {
            net_size -= w.can_receive;
            w.has = w.ma;
            w.can_receive = 0;
            w.can_give = w.has - w.mi;
        }
    }
    ww2 = _pymeth_copy.call(ww);
    for (iter = 0; iter < 4; iter += 1) {
        if ((((_pyfunc_abs(net_size) < 0.5)) || (ww2.length == 0))) {
            break;
        }
        size_for_each = net_size / ww2.length;
        stub5_seq = _pyfunc_reversed(_pyfunc_range(0, ww2.length, 1));
        if ((typeof stub5_seq === "object") && (!Array.isArray(stub5_seq))) { stub5_seq = Object.keys(stub5_seq);}
        for (stub6_itr = 0; stub6_itr < stub5_seq.length; stub6_itr += 1) {
            i = stub5_seq[stub6_itr];
            w = ww2[i];
            if ((net_size > 0)) {
                if ((w.can_receive > 0)) {
                    gets = Math.min(w.can_receive, size_for_each);
                    net_size -= gets;
                    w.can_receive -= gets;
                    w.has = _pyfunc_op_add(w.has, gets);
                }
                if ((w.can_receive <= 0)) {
                    _pymeth_pop.call(ww2, i);
                }
            } else {
                if ((w.can_give > 0)) {
                    take = Math.min(w.can_give, (-size_for_each));
                    net_size = _pyfunc_op_add(net_size, take);
                    w.can_give -= take;
                    w.has -= take;
                }
                if ((w.can_give <= 0)) {
                    _pymeth_pop.call(ww2, i);
                }
            }
        }
    }
    ref_pos = 0;
    for (i = 0; i < this._seps.length; i += 1) {
        ref_pos = _pyfunc_op_add(ref_pos, ww[i].has);
        this._seps[i].abs_pos = ref_pos;
    }
    for (i = 0; i < this._seps.length; i += 1) {
        this._seps[i].rel_pos = (this._seps[i].abs_pos) / available_size;
    }
    return null;
};

$HVLayout._HVLayout__render_positions = function () {
    var available_size, bar_size, child, children, i, is_horizonal, is_reversed, last_sep_pos, offset, ori, pad_size, pos, ref_pos, sep, size, stub1_, stub2_seq, stub3_itr, total_size, widget;
    children = this.children;
    bar_size = this.spacing;
    pad_size = this.padding;
    stub1_ = this._get_available_size();
    total_size = stub1_[0];available_size = stub1_[1];
    ori = this.orientation;
    if (_pyfunc_truthy(children.length != (this._seps.length + 1))) {
        return null;
    }
    this._HVLayout__apply_positions();
    is_horizonal = _pyfunc_op_contains("h", ori);
    is_reversed = _pyfunc_op_contains("r", ori);
    offset = pad_size;
    last_sep_pos = 0;
    for (i = 0; i < children.length; i += 1) {
        widget = children[i];
        ref_pos = ((i < this._seps.length))? (this._seps[i].abs_pos) : (available_size);
        size = ref_pos - last_sep_pos;
        if (true) {
            pos = _pyfunc_op_add(last_sep_pos, offset);
            if ((is_reversed === true)) {
                pos = (total_size - pos) - size;
            }
            if ((is_horizonal === true)) {
                widget.outernode.style.left = pos + "px";
                widget.outernode.style.width = size + "px";
                widget.outernode.style.top = pad_size + "px";
                widget.outernode.style.height = ("calc(100% - " + _pyfunc_op_mult(2, pad_size)) + "px)";
            } else {
                widget.outernode.style.left = pad_size + "px";
                widget.outernode.style.width = ("calc(100% - " + _pyfunc_op_mult(2, pad_size)) + "px)";
                widget.outernode.style.top = pos + "px";
                widget.outernode.style.height = size + "px";
            }
        }
        if ((i < this._seps.length)) {
            sep = this._seps[i];
            pos = _pyfunc_op_add(sep.abs_pos, offset);
            if ((is_reversed === true)) {
                pos = (total_size - pos) - bar_size;
            }
            if ((is_horizonal === true)) {
                sep.style.left = pos + "px";
                sep.style.width = bar_size + "px";
                sep.style.top = "0";
                sep.style.height = "100%";
            } else {
                sep.style.top = pos + "px";
                sep.style.height = bar_size + "px";
                sep.style.left = "0";
                sep.style.width = "100%";
            }
            offset = _pyfunc_op_add(offset, bar_size);
            last_sep_pos = sep.abs_pos;
        }
    }
    stub2_seq = children;
    if ((typeof stub2_seq === "object") && (!Array.isArray(stub2_seq))) { stub2_seq = Object.keys(stub2_seq);}
    for (stub3_itr = 0; stub3_itr < stub2_seq.length; stub3_itr += 1) {
        child = stub2_seq[stub3_itr];
        child.check_real_size();
    }
    return null;
};
$HVLayout._HVLayout__render_positions.nobind = true;
$HVLayout._HVLayout__render_positions._mode = "greedy"
$HVLayout._HVLayout__render_positions._connection_strings = ["!_render"]

$HVLayout.pointer_down = function (e) {
    var sep, t, x_or_y1;
    if ((_pyfunc_op_equals(this.mode, "SPLIT") && (_pyfunc_truthy(e.target.classList.contains("flx-split-sep"))))) {
        e.stopPropagation();
        sep = e.target;
        t = (_pyfunc_truthy(e.changedTouches))? (e.changedTouches[0]) : (e);
        x_or_y1 = (_pyfunc_op_contains("h", this.orientation))? (t.clientX) : (t.clientY);
        this._dragging = [this.orientation, sep.i, sep.abs_pos, x_or_y1];
        this.outernode.classList.add("flx-dragging");
    } else {
        return (Layout.prototype.pointer_down).call(this, e);
    }
    return null;
};
$HVLayout.pointer_down.nobind = true;

$HVLayout.pointer_up = function (e) {
    this._dragging = null;
    _pymeth_remove.call(this.outernode.classList, "flx-dragging");
    return (Layout.prototype.pointer_down).call(this, e);
};
$HVLayout.pointer_up.nobind = true;

$HVLayout.pointer_move = function (e) {
    var diff, i, ori, ref_pos, stub1_, t, x_or_y1, x_or_y2;
    if ((this._dragging !== null)) {
        e.stopPropagation();
        e.preventDefault();
        stub1_ = this._dragging;
        ori = stub1_[0];i = stub1_[1];ref_pos = stub1_[2];x_or_y1 = stub1_[3];
        if (_pyfunc_op_equals(ori, this.orientation)) {
            t = (_pyfunc_truthy(e.changedTouches))? (e.changedTouches[0]) : (e);
            x_or_y2 = (_pyfunc_op_contains("h", this.orientation))? (t.clientX) : (t.clientY);
            diff = (_pyfunc_op_contains("r", ori))? (x_or_y1 - x_or_y2) : (x_or_y2 - x_or_y1);
            this._HVLayout__apply_one_splitter_pos(i, Math.max(0, _pyfunc_op_add(ref_pos, diff)));
        }
    } else {
        return (Layout.prototype.pointer_move).call(this, e);
    }
    return null;
};
$HVLayout.pointer_move.nobind = true;

$HVLayout._mode_validate = function (value) { return event.EnumProp.prototype._validate(value, "mode", ["BOX", "FIX", "SPLIT"]); }

$HVLayout._mutate_mode = function () {
    var args;
    args = Array.prototype.slice.call(arguments);
    return this._mutate.apply(this, [].concat(['mode'], args));
};

$HVLayout.set_mode = function flx_setter () {
    var val;
    val = Array.prototype.slice.call(arguments);
    this._mutate('mode', ((val.length == 1))? (val[0]) : (val));
    return null;
};
$HVLayout.set_mode.nobind = true;

$HVLayout._orientation_validate = function (value) { return OrientationProp.prototype._validate(value, "orientation", null); }

$HVLayout._mutate_orientation = function () {
    var args;
    args = Array.prototype.slice.call(arguments);
    return this._mutate.apply(this, [].concat(['orientation'], args));
};

$HVLayout.set_orientation = function flx_setter () {
    var val;
    val = Array.prototype.slice.call(arguments);
    this._mutate('orientation', ((val.length == 1))? (val[0]) : (val));
    return null;
};
$HVLayout.set_orientation.nobind = true;

$HVLayout._spacing_validate = function (value) { return event.FloatProp.prototype._validate(value, "spacing", null); }

$HVLayout._mutate_spacing = function () {
    var args;
    args = Array.prototype.slice.call(arguments);
    return this._mutate.apply(this, [].concat(['spacing'], args));
};

$HVLayout.set_spacing = function flx_setter () {
    var val;
    val = Array.prototype.slice.call(arguments);
    this._mutate('spacing', ((val.length == 1))? (val[0]) : (val));
    return null;
};
$HVLayout.set_spacing.nobind = true;

$HVLayout._padding_validate = function (value) { return event.FloatProp.prototype._validate(value, "padding", null); }

$HVLayout._mutate_padding = function () {
    var args;
    args = Array.prototype.slice.call(arguments);
    return this._mutate.apply(this, [].concat(['padding'], args));
};

$HVLayout.set_padding = function flx_setter () {
    var val;
    val = Array.prototype.slice.call(arguments);
    this._mutate('padding', ((val.length == 1))? (val[0]) : (val));
    return null;
};
$HVLayout.set_padding.nobind = true;

$HVLayout._splitter_positions_validate = function (value) { return app$LocalProperty.prototype._validate(value, "splitter_positions", null); }

$HVLayout._mutate_splitter_positions = function () {
    var args;
    args = Array.prototype.slice.call(arguments);
    return this._mutate.apply(this, [].concat(['splitter_positions'], args));
};



var _applyBoxStyle;
_applyBoxStyle = function flx__applyBoxStyle (e, sty, value) {
    var prefix, stub1_seq, stub2_itr;
    stub1_seq = ["-webkit-", "-ms-", "-moz-", ""];
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) { stub1_seq = Object.keys(stub1_seq);}
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        prefix = stub1_seq[stub2_itr];
        e.style[_pyfunc_op_add(prefix, sty)] = value;
    }
    return null;
};


var _get_min_max;
_get_min_max = function flx__get_min_max (widget, ori) {
    var mima;
    mima = widget._size_limits;
    if (_pyfunc_op_contains("h", ori)) {
        return [mima[0], mima[1]];
    } else {
        return [mima[2], mima[3]];
    }
    return null;
};


var HBox = function () {
    _pyfunc_op_instantiate(this, arguments);
}
HBox.prototype = Object.create(HVLayout.prototype);
HBox.prototype._base_class = HVLayout.prototype;
HBox.prototype.__name__ = "HBox";
var $HBox = HBox.prototype;

$HBox._DEFAULT_ORIENTATION = "h"
$HBox._DEFAULT_MODE = "box"
$HBox.__attributes__ = ["id", "root", "session", "uid"]
$HBox.__properties__ = ["_size_limits", "capture_mouse", "children", "container", "css_class", "flex", "icon", "maxsize", "minsize", "minsize_from_children", "mode", "orientation", "padding", "parent", "size", "spacing", "splitter_positions", "tabindex", "title"]
$HBox.__actions__ = ["_rerender", "_set_size_limits", "apply_style", "check_real_size", "set_capture_mouse", "set_container", "set_css_class", "set_flex", "set_from_flex_values", "set_icon", "set_maxsize", "set_minsize", "set_minsize_from_children", "set_mode", "set_orientation", "set_padding", "set_parent", "set_spacing", "set_splitter_positions", "set_tabindex", "set_title"]
$HBox.__emitters__ = ["key_down", "key_press", "key_up", "pointer_cancel", "pointer_click", "pointer_double_click", "pointer_down", "pointer_move", "pointer_up", "pointer_wheel", "user_splitter_positions"]
$HBox.__reactions__ = ["_HVLayout__let_children_check_size", "_HVLayout__render_positions", "_HVLayout__set_mode", "_HVLayout__set_orientation", "_HVLayout__set_padding", "_HVLayout__size_changed", "_HVLayout__spacing_changed", "_HVLayout__watch_splitter_positions", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__render", "_Widget__size_may_have_changed", "_Widget__title_changed", "_Widget__update_tabindex", "_set_box_child_flexes", "_set_box_spacing", "_set_split_from_flexes", "_update_minmaxsize"]
$HBox.__jsmodule__ = "flexx.ui.layouts._hv"
$HBox.__proxy_properties__ = ["_size_limits", "capture_mouse", "container", "css_class", "flex", "maxsize", "minsize", "minsize_from_children", "mode", "orientation", "padding", "parent", "size", "spacing", "tabindex", "title"]


var VBox = function () {
    _pyfunc_op_instantiate(this, arguments);
}
VBox.prototype = Object.create(HVLayout.prototype);
VBox.prototype._base_class = HVLayout.prototype;
VBox.prototype.__name__ = "VBox";
var $VBox = VBox.prototype;

$VBox._DEFAULT_ORIENTATION = "v"
$VBox._DEFAULT_MODE = "box"
$VBox.__attributes__ = ["id", "root", "session", "uid"]
$VBox.__properties__ = ["_size_limits", "capture_mouse", "children", "container", "css_class", "flex", "icon", "maxsize", "minsize", "minsize_from_children", "mode", "orientation", "padding", "parent", "size", "spacing", "splitter_positions", "tabindex", "title"]
$VBox.__actions__ = ["_rerender", "_set_size_limits", "apply_style", "check_real_size", "set_capture_mouse", "set_container", "set_css_class", "set_flex", "set_from_flex_values", "set_icon", "set_maxsize", "set_minsize", "set_minsize_from_children", "set_mode", "set_orientation", "set_padding", "set_parent", "set_spacing", "set_splitter_positions", "set_tabindex", "set_title"]
$VBox.__emitters__ = ["key_down", "key_press", "key_up", "pointer_cancel", "pointer_click", "pointer_double_click", "pointer_down", "pointer_move", "pointer_up", "pointer_wheel", "user_splitter_positions"]
$VBox.__reactions__ = ["_HVLayout__let_children_check_size", "_HVLayout__render_positions", "_HVLayout__set_mode", "_HVLayout__set_orientation", "_HVLayout__set_padding", "_HVLayout__size_changed", "_HVLayout__spacing_changed", "_HVLayout__watch_splitter_positions", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__render", "_Widget__size_may_have_changed", "_Widget__title_changed", "_Widget__update_tabindex", "_set_box_child_flexes", "_set_box_spacing", "_set_split_from_flexes", "_update_minmaxsize"]
$VBox.__jsmodule__ = "flexx.ui.layouts._hv"
$VBox.__proxy_properties__ = ["_size_limits", "capture_mouse", "container", "css_class", "flex", "maxsize", "minsize", "minsize_from_children", "mode", "orientation", "padding", "parent", "size", "spacing", "tabindex", "title"]


var HFix = function () {
    _pyfunc_op_instantiate(this, arguments);
}
HFix.prototype = Object.create(HVLayout.prototype);
HFix.prototype._base_class = HVLayout.prototype;
HFix.prototype.__name__ = "HFix";
var $HFix = HFix.prototype;

$HFix._DEFAULT_ORIENTATION = "h"
$HFix._DEFAULT_MODE = "fix"
$HFix.__attributes__ = ["id", "root", "session", "uid"]
$HFix.__properties__ = ["_size_limits", "capture_mouse", "children", "container", "css_class", "flex", "icon", "maxsize", "minsize", "minsize_from_children", "mode", "orientation", "padding", "parent", "size", "spacing", "splitter_positions", "tabindex", "title"]
$HFix.__actions__ = ["_rerender", "_set_size_limits", "apply_style", "check_real_size", "set_capture_mouse", "set_container", "set_css_class", "set_flex", "set_from_flex_values", "set_icon", "set_maxsize", "set_minsize", "set_minsize_from_children", "set_mode", "set_orientation", "set_padding", "set_parent", "set_spacing", "set_splitter_positions", "set_tabindex", "set_title"]
$HFix.__emitters__ = ["key_down", "key_press", "key_up", "pointer_cancel", "pointer_click", "pointer_double_click", "pointer_down", "pointer_move", "pointer_up", "pointer_wheel", "user_splitter_positions"]
$HFix.__reactions__ = ["_HVLayout__let_children_check_size", "_HVLayout__render_positions", "_HVLayout__set_mode", "_HVLayout__set_orientation", "_HVLayout__set_padding", "_HVLayout__size_changed", "_HVLayout__spacing_changed", "_HVLayout__watch_splitter_positions", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__render", "_Widget__size_may_have_changed", "_Widget__title_changed", "_Widget__update_tabindex", "_set_box_child_flexes", "_set_box_spacing", "_set_split_from_flexes", "_update_minmaxsize"]
$HFix.__jsmodule__ = "flexx.ui.layouts._hv"
$HFix.__proxy_properties__ = ["_size_limits", "capture_mouse", "container", "css_class", "flex", "maxsize", "minsize", "minsize_from_children", "mode", "orientation", "padding", "parent", "size", "spacing", "tabindex", "title"]


var VFix = function () {
    _pyfunc_op_instantiate(this, arguments);
}
VFix.prototype = Object.create(HVLayout.prototype);
VFix.prototype._base_class = HVLayout.prototype;
VFix.prototype.__name__ = "VFix";
var $VFix = VFix.prototype;

$VFix._DEFAULT_ORIENTATION = "v"
$VFix._DEFAULT_MODE = "fix"
$VFix.__attributes__ = ["id", "root", "session", "uid"]
$VFix.__properties__ = ["_size_limits", "capture_mouse", "children", "container", "css_class", "flex", "icon", "maxsize", "minsize", "minsize_from_children", "mode", "orientation", "padding", "parent", "size", "spacing", "splitter_positions", "tabindex", "title"]
$VFix.__actions__ = ["_rerender", "_set_size_limits", "apply_style", "check_real_size", "set_capture_mouse", "set_container", "set_css_class", "set_flex", "set_from_flex_values", "set_icon", "set_maxsize", "set_minsize", "set_minsize_from_children", "set_mode", "set_orientation", "set_padding", "set_parent", "set_spacing", "set_splitter_positions", "set_tabindex", "set_title"]
$VFix.__emitters__ = ["key_down", "key_press", "key_up", "pointer_cancel", "pointer_click", "pointer_double_click", "pointer_down", "pointer_move", "pointer_up", "pointer_wheel", "user_splitter_positions"]
$VFix.__reactions__ = ["_HVLayout__let_children_check_size", "_HVLayout__render_positions", "_HVLayout__set_mode", "_HVLayout__set_orientation", "_HVLayout__set_padding", "_HVLayout__size_changed", "_HVLayout__spacing_changed", "_HVLayout__watch_splitter_positions", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__render", "_Widget__size_may_have_changed", "_Widget__title_changed", "_Widget__update_tabindex", "_set_box_child_flexes", "_set_box_spacing", "_set_split_from_flexes", "_update_minmaxsize"]
$VFix.__jsmodule__ = "flexx.ui.layouts._hv"
$VFix.__proxy_properties__ = ["_size_limits", "capture_mouse", "container", "css_class", "flex", "maxsize", "minsize", "minsize_from_children", "mode", "orientation", "padding", "parent", "size", "spacing", "tabindex", "title"]


var HSplit = function () {
    _pyfunc_op_instantiate(this, arguments);
}
HSplit.prototype = Object.create(HVLayout.prototype);
HSplit.prototype._base_class = HVLayout.prototype;
HSplit.prototype.__name__ = "HSplit";
var $HSplit = HSplit.prototype;

$HSplit._DEFAULT_ORIENTATION = "h"
$HSplit._DEFAULT_MODE = "split"
$HSplit.__attributes__ = ["id", "root", "session", "uid"]
$HSplit.__properties__ = ["_size_limits", "capture_mouse", "children", "container", "css_class", "flex", "icon", "maxsize", "minsize", "minsize_from_children", "mode", "orientation", "padding", "parent", "size", "spacing", "splitter_positions", "tabindex", "title"]
$HSplit.__actions__ = ["_rerender", "_set_size_limits", "apply_style", "check_real_size", "set_capture_mouse", "set_container", "set_css_class", "set_flex", "set_from_flex_values", "set_icon", "set_maxsize", "set_minsize", "set_minsize_from_children", "set_mode", "set_orientation", "set_padding", "set_parent", "set_spacing", "set_splitter_positions", "set_tabindex", "set_title"]
$HSplit.__emitters__ = ["key_down", "key_press", "key_up", "pointer_cancel", "pointer_click", "pointer_double_click", "pointer_down", "pointer_move", "pointer_up", "pointer_wheel", "user_splitter_positions"]
$HSplit.__reactions__ = ["_HVLayout__let_children_check_size", "_HVLayout__render_positions", "_HVLayout__set_mode", "_HVLayout__set_orientation", "_HVLayout__set_padding", "_HVLayout__size_changed", "_HVLayout__spacing_changed", "_HVLayout__watch_splitter_positions", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__render", "_Widget__size_may_have_changed", "_Widget__title_changed", "_Widget__update_tabindex", "_set_box_child_flexes", "_set_box_spacing", "_set_split_from_flexes", "_update_minmaxsize"]
$HSplit.__jsmodule__ = "flexx.ui.layouts._hv"
$HSplit.__proxy_properties__ = ["_size_limits", "capture_mouse", "container", "css_class", "flex", "maxsize", "minsize", "minsize_from_children", "mode", "orientation", "padding", "parent", "size", "spacing", "tabindex", "title"]


var VSplit = function () {
    _pyfunc_op_instantiate(this, arguments);
}
VSplit.prototype = Object.create(HVLayout.prototype);
VSplit.prototype._base_class = HVLayout.prototype;
VSplit.prototype.__name__ = "VSplit";
var $VSplit = VSplit.prototype;

$VSplit._DEFAULT_ORIENTATION = "v"
$VSplit._DEFAULT_MODE = "split"
$VSplit.__attributes__ = ["id", "root", "session", "uid"]
$VSplit.__properties__ = ["_size_limits", "capture_mouse", "children", "container", "css_class", "flex", "icon", "maxsize", "minsize", "minsize_from_children", "mode", "orientation", "padding", "parent", "size", "spacing", "splitter_positions", "tabindex", "title"]
$VSplit.__actions__ = ["_rerender", "_set_size_limits", "apply_style", "check_real_size", "set_capture_mouse", "set_container", "set_css_class", "set_flex", "set_from_flex_values", "set_icon", "set_maxsize", "set_minsize", "set_minsize_from_children", "set_mode", "set_orientation", "set_padding", "set_parent", "set_spacing", "set_splitter_positions", "set_tabindex", "set_title"]
$VSplit.__emitters__ = ["key_down", "key_press", "key_up", "pointer_cancel", "pointer_click", "pointer_double_click", "pointer_down", "pointer_move", "pointer_up", "pointer_wheel", "user_splitter_positions"]
$VSplit.__reactions__ = ["_HVLayout__let_children_check_size", "_HVLayout__render_positions", "_HVLayout__set_mode", "_HVLayout__set_orientation", "_HVLayout__set_padding", "_HVLayout__size_changed", "_HVLayout__spacing_changed", "_HVLayout__watch_splitter_positions", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__render", "_Widget__size_may_have_changed", "_Widget__title_changed", "_Widget__update_tabindex", "_set_box_child_flexes", "_set_box_spacing", "_set_split_from_flexes", "_update_minmaxsize"]
$VSplit.__jsmodule__ = "flexx.ui.layouts._hv"
$VSplit.__proxy_properties__ = ["_size_limits", "capture_mouse", "container", "css_class", "flex", "maxsize", "minsize", "minsize_from_children", "mode", "orientation", "padding", "parent", "size", "spacing", "tabindex", "title"]


return {HBox: HBox, HFix: HFix, HSplit: HSplit, HVLayout: HVLayout, OrientationProp: OrientationProp, VBox: VBox, VFix: VFix, VSplit: VSplit, _applyBoxStyle: _applyBoxStyle, _get_min_max: _get_min_max};
});
