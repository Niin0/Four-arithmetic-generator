/* ====================== flexx.ui.widgets._label =======================*/

/* Autogenerated code from Flexx. Code Subject to the BSD-2-clause license. */



flexx.define("flexx.ui.widgets._label", ["pscript-std.js", "flexx.ui._widget", "flexx.event.js"], function (_py, flexx$ui$_widget, event) {

"use strict";

var _pyfunc_op_instantiate = _py._pyfunc_op_instantiate, _pyfunc_truthy = _py._pyfunc_truthy;

var Widget = flexx$ui$_widget.Widget;





var Label = function () {
    _pyfunc_op_instantiate(this, arguments);
}
Label.prototype = Object.create(Widget.prototype);
Label.prototype._base_class = Widget.prototype;
Label.prototype.__name__ = "Label";
var $Label = Label.prototype;

$Label.DEFAULT_MIN_SIZE = [10, 24]
$Label._text_value = "";
$Label._html_value = "";
$Label._wrap_value = 0;
$Label.__attributes__ = ["id", "root", "session", "uid"]
$Label.__properties__ = ["_size_limits", "capture_mouse", "children", "container", "css_class", "flex", "html", "icon", "maxsize", "minsize", "minsize_from_children", "parent", "size", "tabindex", "text", "title", "wrap"]
$Label.__actions__ = ["_set_size_limits", "apply_style", "check_real_size", "set_capture_mouse", "set_container", "set_css_class", "set_flex", "set_html", "set_icon", "set_maxsize", "set_minsize", "set_minsize_from_children", "set_parent", "set_tabindex", "set_text", "set_title", "set_wrap"]
$Label.__emitters__ = ["key_down", "key_press", "key_up", "pointer_cancel", "pointer_click", "pointer_double_click", "pointer_down", "pointer_move", "pointer_up", "pointer_wheel"]
$Label.__reactions__ = ["_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__render", "_Widget__size_may_have_changed", "_Widget__title_changed", "_Widget__update_tabindex", "_update_minmaxsize", "_wrap_changed"]
$Label.__jsmodule__ = "flexx.ui.widgets._label"
$Label.__proxy_properties__ = ["_size_limits", "capture_mouse", "container", "css_class", "flex", "html", "maxsize", "minsize", "minsize_from_children", "parent", "size", "tabindex", "text", "title", "wrap"]

$Label.init = function () {
    if (_pyfunc_truthy(this.text)) {
        this.set_text(this.text);
    } else if (_pyfunc_truthy(this.html)) {
        this.set_html(this.html);
    }
    return null;
};

$Label.set_text = function set_text (text) {
    if ((!_pyfunc_truthy(this.node))) {
        this._mutate_text(text);
        return null;
    }
    this.node.textContent = text;
    this._mutate_text(this.node.textContent);
    this._mutate_html(this.node.innerHTML);
    return null;
};
$Label.set_text.nobind = true;

$Label.set_html = function set_html (html) {
    if ((!_pyfunc_truthy(this.node))) {
        this._mutate_html(html);
        return null;
    }
    this.node.innerHTML = html;
    this._mutate_text(this.node.textContent);
    this._mutate_html(this.node.innerHTML);
    return null;
};
$Label.set_html.nobind = true;

$Label._wrap_changed = function () {
    var events, wrap;
    events = Array.prototype.slice.call(arguments);
    wrap = this.wrap;
    if (((wrap < 0) || (wrap > 2))) {
        wrap = 0;
    }
    this.node.style["word-wrap"] = ["normal", "normal", "break-word"][wrap];
    this.node.style["white-space"] = ["nowrap", "normal", "normal"][wrap];
    this.check_real_size(true);
    return null;
};
$Label._wrap_changed.nobind = true;
$Label._wrap_changed._mode = "normal"
$Label._wrap_changed._connection_strings = ["wrap"]

$Label._text_validate = function (value) { return event.StringProp.prototype._validate(value, "text", null); }

$Label._mutate_text = function () {
    var args;
    args = Array.prototype.slice.call(arguments);
    return this._mutate.apply(this, [].concat(['text'], args));
};

$Label._html_validate = function (value) { return event.StringProp.prototype._validate(value, "html", null); }

$Label._mutate_html = function () {
    var args;
    args = Array.prototype.slice.call(arguments);
    return this._mutate.apply(this, [].concat(['html'], args));
};

$Label._wrap_validate = function (value) { return event.IntProp.prototype._validate(value, "wrap", null); }

$Label._mutate_wrap = function () {
    var args;
    args = Array.prototype.slice.call(arguments);
    return this._mutate.apply(this, [].concat(['wrap'], args));
};

$Label.set_wrap = function flx_setter () {
    var val;
    val = Array.prototype.slice.call(arguments);
    this._mutate('wrap', ((val.length == 1))? (val[0]) : (val));
    return null;
};
$Label.set_wrap.nobind = true;



return {Label: Label};
});
