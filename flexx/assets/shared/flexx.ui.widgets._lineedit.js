/* ===================== flexx.ui.widgets._lineedit =====================*/

/* Autogenerated code from Flexx. Code Subject to the BSD-2-clause license. */



flexx.define("flexx.ui.widgets._lineedit", ["pscript-std.js", "flexx.ui._widget", "flexx.event.js"], function (_py, flexx$ui$_widget, event) {

"use strict";

var _pyfunc_bool = _py._pyfunc_bool, _pyfunc_int = _py._pyfunc_int, _pyfunc_op_contains = _py._pyfunc_op_contains, _pyfunc_op_equals = _py._pyfunc_op_equals, _pyfunc_op_instantiate = _py._pyfunc_op_instantiate, _pyfunc_truthy = _py._pyfunc_truthy;

var Widget = flexx$ui$_widget.Widget;





var LineEdit = function () {
    _pyfunc_op_instantiate(this, arguments);
}
LineEdit.prototype = Object.create(Widget.prototype);
LineEdit.prototype._base_class = Widget.prototype;
LineEdit.prototype.__name__ = "LineEdit";
var $LineEdit = LineEdit.prototype;

$LineEdit.DEFAULT_MIN_SIZE = [100, 28]
$LineEdit._text_value = "";
$LineEdit._password_mode_value = false;
$LineEdit._placeholder_text_value = "";
$LineEdit._autocomp_value = [];
$LineEdit._disabled_value = false;
$LineEdit.__attributes__ = ["id", "root", "session", "uid"]
$LineEdit.__properties__ = ["_size_limits", "autocomp", "capture_mouse", "children", "container", "css_class", "disabled", "flex", "icon", "maxsize", "minsize", "minsize_from_children", "parent", "password_mode", "placeholder_text", "size", "tabindex", "text", "title"]
$LineEdit.__actions__ = ["_set_size_limits", "apply_style", "check_real_size", "set_autocomp", "set_capture_mouse", "set_container", "set_css_class", "set_disabled", "set_flex", "set_icon", "set_maxsize", "set_minsize", "set_minsize_from_children", "set_parent", "set_password_mode", "set_placeholder_text", "set_tabindex", "set_text", "set_title"]
$LineEdit.__emitters__ = ["key_down", "key_press", "key_up", "pointer_cancel", "pointer_click", "pointer_double_click", "pointer_down", "pointer_move", "pointer_up", "pointer_wheel", "submit", "user_done", "user_text"]
$LineEdit.__reactions__ = ["_LineEdit__autocomp_changed", "_LineEdit__disabled_changed", "_LineEdit__password_mode_changed", "_LineEdit__placeholder_text_changed", "_LineEdit__text_changed", "_Widget__container_changed", "_Widget__css_class_changed", "_Widget__icon_changed", "_Widget__render", "_Widget__size_may_have_changed", "_Widget__title_changed", "_Widget__update_tabindex", "_update_minmaxsize"]
$LineEdit.__jsmodule__ = "flexx.ui.widgets._lineedit"
$LineEdit.__proxy_properties__ = ["_size_limits", "autocomp", "capture_mouse", "container", "css_class", "disabled", "flex", "maxsize", "minsize", "minsize_from_children", "parent", "password_mode", "placeholder_text", "size", "tabindex", "text", "title"]

$LineEdit._create_dom = function () {
    var f1, node;
    node = window.document.createElement("input");
    node.setAttribute("type", "input");
    node.setAttribute("list", this.id);
    this._autocomp = window.document.createElement("datalist");
    this._autocomp.id = this.id;
    node.appendChild(this._autocomp);
    f1 = (function () {return this.user_text(this.node.value);}).bind(this);
    this._addEventListener(node, "input", f1, false);
    this._addEventListener(node, "blur", this.user_done, false);
    return node;
};

$LineEdit.user_text = function (text) {
    var d;
    d = ({old_value: this.text, new_value: text});
    this.set_text(text);
    return d;
};
$LineEdit.user_text.nobind = true;

$LineEdit.user_done = function () {
    var d;
    d = ({old_value: this.text, new_value: this.text});
    return d;
};
$LineEdit.user_done.nobind = true;

$LineEdit.submit = function () {
    var d;
    this.user_done();
    d = ({old_value: this.text, new_value: this.text});
    return d;
};
$LineEdit.submit.nobind = true;

$LineEdit.key_down = function (e) {
    var ev, pkeys;
    ev = (Widget.prototype.key_down).call(this, e);
    pkeys = ["Escape"];
    if ((((_pyfunc_truthy(ev.modifiers) && ((!_pyfunc_op_equals(ev.modifiers, ["Shift"]))))) || _pyfunc_op_contains(ev.key, pkeys))) {
    } else {
        e.stopPropagation();
    }
    if (_pyfunc_op_contains(ev.key, ["Enter", "Return"])) {
        this.submit();
    } else if (_pyfunc_op_equals(ev.key, "Escape")) {
        this.node.blur();
    }
    return ev;
};
$LineEdit.key_down.nobind = true;

$LineEdit._LineEdit__text_changed = function () {
    this.node.value = this.text;
    return null;
};
$LineEdit._LineEdit__text_changed.nobind = true;
$LineEdit._LineEdit__text_changed._mode = "auto"

$LineEdit._LineEdit__password_mode_changed = function () {
    this.node.type = ["text", "password"][_pyfunc_int(_pyfunc_bool(this.password_mode))];
    return null;
};
$LineEdit._LineEdit__password_mode_changed.nobind = true;
$LineEdit._LineEdit__password_mode_changed._mode = "auto"

$LineEdit._LineEdit__placeholder_text_changed = function () {
    this.node.placeholder = this.placeholder_text;
    return null;
};
$LineEdit._LineEdit__placeholder_text_changed.nobind = true;
$LineEdit._LineEdit__placeholder_text_changed._mode = "auto"

$LineEdit._LineEdit__autocomp_changed = function () {
    var autocomp, op, option, stub1_seq, stub2_itr, stub3_seq, stub4_itr;
    autocomp = this.autocomp;
    stub1_seq = this._autocomp;
    if ((typeof stub1_seq === "object") && (!Array.isArray(stub1_seq))) { stub1_seq = Object.keys(stub1_seq);}
    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {
        op = stub1_seq[stub2_itr];
        this._autocomp.removeChild(op);
    }
    stub3_seq = autocomp;
    if ((typeof stub3_seq === "object") && (!Array.isArray(stub3_seq))) { stub3_seq = Object.keys(stub3_seq);}
    for (stub4_itr = 0; stub4_itr < stub3_seq.length; stub4_itr += 1) {
        option = stub3_seq[stub4_itr];
        op = window.document.createElement("option");
        op.value = option;
        this._autocomp.appendChild(op);
    }
    return null;
};
$LineEdit._LineEdit__autocomp_changed.nobind = true;
$LineEdit._LineEdit__autocomp_changed._mode = "auto"

$LineEdit._LineEdit__disabled_changed = function () {
    if (_pyfunc_truthy(this.disabled)) {
        this.node.setAttribute("disabled", "disabled");
    } else {
        this.node.removeAttribute("disabled");
    }
    return null;
};
$LineEdit._LineEdit__disabled_changed.nobind = true;
$LineEdit._LineEdit__disabled_changed._mode = "auto"

$LineEdit._text_validate = function (value) { return event.StringProp.prototype._validate(value, "text", null); }

$LineEdit._mutate_text = function () {
    var args;
    args = Array.prototype.slice.call(arguments);
    return this._mutate.apply(this, [].concat(['text'], args));
};

$LineEdit.set_text = function flx_setter () {
    var val;
    val = Array.prototype.slice.call(arguments);
    this._mutate('text', ((val.length == 1))? (val[0]) : (val));
    return null;
};
$LineEdit.set_text.nobind = true;

$LineEdit._password_mode_validate = function (value) { return event.BoolProp.prototype._validate(value, "password_mode", null); }

$LineEdit._mutate_password_mode = function () {
    var args;
    args = Array.prototype.slice.call(arguments);
    return this._mutate.apply(this, [].concat(['password_mode'], args));
};

$LineEdit.set_password_mode = function flx_setter () {
    var val;
    val = Array.prototype.slice.call(arguments);
    this._mutate('password_mode', ((val.length == 1))? (val[0]) : (val));
    return null;
};
$LineEdit.set_password_mode.nobind = true;

$LineEdit._placeholder_text_validate = function (value) { return event.StringProp.prototype._validate(value, "placeholder_text", null); }

$LineEdit._mutate_placeholder_text = function () {
    var args;
    args = Array.prototype.slice.call(arguments);
    return this._mutate.apply(this, [].concat(['placeholder_text'], args));
};

$LineEdit.set_placeholder_text = function flx_setter () {
    var val;
    val = Array.prototype.slice.call(arguments);
    this._mutate('placeholder_text', ((val.length == 1))? (val[0]) : (val));
    return null;
};
$LineEdit.set_placeholder_text.nobind = true;

$LineEdit._autocomp_validate = function (value) { return event.TupleProp.prototype._validate(value, "autocomp", null); }

$LineEdit._mutate_autocomp = function () {
    var args;
    args = Array.prototype.slice.call(arguments);
    return this._mutate.apply(this, [].concat(['autocomp'], args));
};

$LineEdit.set_autocomp = function flx_setter () {
    var val;
    val = Array.prototype.slice.call(arguments);
    this._mutate('autocomp', ((val.length == 1))? (val[0]) : (val));
    return null;
};
$LineEdit.set_autocomp.nobind = true;

$LineEdit._disabled_validate = function (value) { return event.BoolProp.prototype._validate(value, "disabled", null); }

$LineEdit._mutate_disabled = function () {
    var args;
    args = Array.prototype.slice.call(arguments);
    return this._mutate.apply(this, [].concat(['disabled'], args));
};

$LineEdit.set_disabled = function flx_setter () {
    var val;
    val = Array.prototype.slice.call(arguments);
    this._mutate('disabled', ((val.length == 1))? (val[0]) : (val));
    return null;
};
$LineEdit.set_disabled.nobind = true;



return {LineEdit: LineEdit};
});
